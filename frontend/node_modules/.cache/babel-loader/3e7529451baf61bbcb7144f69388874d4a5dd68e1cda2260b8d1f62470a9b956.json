{"ast":null,"code":"export const calculateWinner=board=>{const boardSize=board.length;// Check rows for a winner\nfor(let row=0;row<boardSize;row++){if(board[row].every(cell=>cell===board[row][0]&&cell!==\"\")){return board[row][0];}}// Check columns for a winner\nfor(let col=0;col<boardSize;col++){if(board.every(row=>row[col]===board[0][col]&&row[col]!==\"\")){return board[0][col];}}// Check main diagonal for a winner\nif(board.every((row,index)=>row[index]===board[0][0]&&row[index]!==\"\")){return board[0][0];}// Check anti-diagonal for a winner\nif(board.every((row,index)=>row[boardSize-index-1]===board[0][boardSize-1]&&row[boardSize-index-1]!==\"\")){return board[0][boardSize-1];}// No winner found\nreturn null;};export const isBoardFull=board=>{return board.every(row=>row.every(cell=>cell!==\"\"));};","map":{"version":3,"names":["calculateWinner","board","boardSize","length","row","every","cell","col","index","isBoardFull"],"sources":["C:/Users/mfauz/Documents/github2/TicTacToe/frontend/src/ai/helpers.ts"],"sourcesContent":["export const calculateWinner = (board: string[][]): string | null => {\n  const boardSize = board.length;\n\n  // Check rows for a winner\n  for (let row = 0; row < boardSize; row++) {\n    if (board[row].every((cell) => cell === board[row][0] && cell !== \"\")) {\n      return board[row][0];\n    }\n  }\n\n  // Check columns for a winner\n  for (let col = 0; col < boardSize; col++) {\n    if (board.every((row) => row[col] === board[0][col] && row[col] !== \"\")) {\n      return board[0][col];\n    }\n  }\n\n  // Check main diagonal for a winner\n  if (\n    board.every((row, index) => row[index] === board[0][0] && row[index] !== \"\")\n  ) {\n    return board[0][0];\n  }\n\n  // Check anti-diagonal for a winner\n  if (\n    board.every(\n      (row, index) =>\n        row[boardSize - index - 1] === board[0][boardSize - 1] &&\n        row[boardSize - index - 1] !== \"\",\n    )\n  ) {\n    return board[0][boardSize - 1];\n  }\n\n  // No winner found\n  return null;\n};\n\nexport const isBoardFull = (board: string[][]): boolean => {\n  return board.every((row) => row.every((cell) => cell !== \"\"));\n};\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,eAAe,CAAIC,KAAiB,EAAoB,CACnE,KAAM,CAAAC,SAAS,CAAGD,KAAK,CAACE,MAAM,CAE9B;AACA,IAAK,GAAI,CAAAC,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAGF,SAAS,CAAEE,GAAG,EAAE,CAAE,CACxC,GAAIH,KAAK,CAACG,GAAG,CAAC,CAACC,KAAK,CAAEC,IAAI,EAAKA,IAAI,GAAKL,KAAK,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAIE,IAAI,GAAK,EAAE,CAAC,CAAE,CACrE,MAAO,CAAAL,KAAK,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,CACtB,CACF,CAEA;AACA,IAAK,GAAI,CAAAG,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAGL,SAAS,CAAEK,GAAG,EAAE,CAAE,CACxC,GAAIN,KAAK,CAACI,KAAK,CAAED,GAAG,EAAKA,GAAG,CAACG,GAAG,CAAC,GAAKN,KAAK,CAAC,CAAC,CAAC,CAACM,GAAG,CAAC,EAAIH,GAAG,CAACG,GAAG,CAAC,GAAK,EAAE,CAAC,CAAE,CACvE,MAAO,CAAAN,KAAK,CAAC,CAAC,CAAC,CAACM,GAAG,CAAC,CACtB,CACF,CAEA;AACA,GACEN,KAAK,CAACI,KAAK,CAAC,CAACD,GAAG,CAAEI,KAAK,GAAKJ,GAAG,CAACI,KAAK,CAAC,GAAKP,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAIG,GAAG,CAACI,KAAK,CAAC,GAAK,EAAE,CAAC,CAC5E,CACA,MAAO,CAAAP,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,CAEA;AACA,GACEA,KAAK,CAACI,KAAK,CACT,CAACD,GAAG,CAAEI,KAAK,GACTJ,GAAG,CAACF,SAAS,CAAGM,KAAK,CAAG,CAAC,CAAC,GAAKP,KAAK,CAAC,CAAC,CAAC,CAACC,SAAS,CAAG,CAAC,CAAC,EACtDE,GAAG,CAACF,SAAS,CAAGM,KAAK,CAAG,CAAC,CAAC,GAAK,EACnC,CAAC,CACD,CACA,MAAO,CAAAP,KAAK,CAAC,CAAC,CAAC,CAACC,SAAS,CAAG,CAAC,CAAC,CAChC,CAEA;AACA,MAAO,KAAI,CACb,CAAC,CAED,MAAO,MAAM,CAAAO,WAAW,CAAIR,KAAiB,EAAc,CACzD,MAAO,CAAAA,KAAK,CAACI,KAAK,CAAED,GAAG,EAAKA,GAAG,CAACC,KAAK,CAAEC,IAAI,EAAKA,IAAI,GAAK,EAAE,CAAC,CAAC,CAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}