{"ast":null,"code":"export const calculateWinner = board => {\n  const boardSize = board.length;\n\n  // Check rows for a winner\n  for (let row = 0; row < boardSize; row++) {\n    if (board[row].every(cell => cell === board[row][0] && cell !== \"\")) {\n      return board[row][0];\n    }\n  }\n\n  // Check columns for a winner\n  for (let col = 0; col < boardSize; col++) {\n    if (board.every(row => row[col] === board[0][col] && row[col] !== \"\")) {\n      return board[0][col];\n    }\n  }\n\n  // Check main diagonal for a winner\n  if (board.every((row, index) => row[index] === board[0][0] && row[index] !== \"\")) {\n    return board[0][0];\n  }\n\n  // Check anti-diagonal for a winner\n  if (board.every((row, index) => row[boardSize - index - 1] === board[0][boardSize - 1] && row[boardSize - index - 1] !== \"\")) {\n    return board[0][boardSize - 1];\n  }\n\n  // No winner found\n  return null;\n};\nexport const isBoardFull = board => {\n  return board.every(row => row.every(cell => cell !== \"\"));\n};","map":{"version":3,"names":["calculateWinner","board","boardSize","length","row","every","cell","col","index","isBoardFull"],"sources":["C:/Users/mfauz/Documents/TicTacToe/frontend/src/ai/helpers.ts"],"sourcesContent":["export const calculateWinner = (board: string[][]): string | null => {\n  const boardSize = board.length;\n\n  // Check rows for a winner\n  for (let row = 0; row < boardSize; row++) {\n    if (board[row].every((cell) => cell === board[row][0] && cell !== \"\")) {\n      return board[row][0];\n    }\n  }\n\n  // Check columns for a winner\n  for (let col = 0; col < boardSize; col++) {\n    if (board.every((row) => row[col] === board[0][col] && row[col] !== \"\")) {\n      return board[0][col];\n    }\n  }\n\n  // Check main diagonal for a winner\n  if (\n    board.every((row, index) => row[index] === board[0][0] && row[index] !== \"\")\n  ) {\n    return board[0][0];\n  }\n\n  // Check anti-diagonal for a winner\n  if (\n    board.every(\n      (row, index) =>\n        row[boardSize - index - 1] === board[0][boardSize - 1] &&\n        row[boardSize - index - 1] !== \"\",\n    )\n  ) {\n    return board[0][boardSize - 1];\n  }\n\n  // No winner found\n  return null;\n};\n\nexport const isBoardFull = (board: string[][]): boolean => {\n  return board.every((row) => row.every((cell) => cell !== \"\"));\n};\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAIC,KAAiB,IAAoB;EACnE,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM;;EAE9B;EACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,SAAS,EAAEE,GAAG,EAAE,EAAE;IACxC,IAAIH,KAAK,CAACG,GAAG,CAAC,CAACC,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAKL,KAAK,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIE,IAAI,KAAK,EAAE,CAAC,EAAE;MACrE,OAAOL,KAAK,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC;IACtB;EACF;;EAEA;EACA,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,SAAS,EAAEK,GAAG,EAAE,EAAE;IACxC,IAAIN,KAAK,CAACI,KAAK,CAAED,GAAG,IAAKA,GAAG,CAACG,GAAG,CAAC,KAAKN,KAAK,CAAC,CAAC,CAAC,CAACM,GAAG,CAAC,IAAIH,GAAG,CAACG,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE;MACvE,OAAON,KAAK,CAAC,CAAC,CAAC,CAACM,GAAG,CAAC;IACtB;EACF;;EAEA;EACA,IACEN,KAAK,CAACI,KAAK,CAAC,CAACD,GAAG,EAAEI,KAAK,KAAKJ,GAAG,CAACI,KAAK,CAAC,KAAKP,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIG,GAAG,CAACI,KAAK,CAAC,KAAK,EAAE,CAAC,EAC5E;IACA,OAAOP,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB;;EAEA;EACA,IACEA,KAAK,CAACI,KAAK,CACT,CAACD,GAAG,EAAEI,KAAK,KACTJ,GAAG,CAACF,SAAS,GAAGM,KAAK,GAAG,CAAC,CAAC,KAAKP,KAAK,CAAC,CAAC,CAAC,CAACC,SAAS,GAAG,CAAC,CAAC,IACtDE,GAAG,CAACF,SAAS,GAAGM,KAAK,GAAG,CAAC,CAAC,KAAK,EACnC,CAAC,EACD;IACA,OAAOP,KAAK,CAAC,CAAC,CAAC,CAACC,SAAS,GAAG,CAAC,CAAC;EAChC;;EAEA;EACA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMO,WAAW,GAAIR,KAAiB,IAAc;EACzD,OAAOA,KAAK,CAACI,KAAK,CAAED,GAAG,IAAKA,GAAG,CAACC,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAK,EAAE,CAAC,CAAC;AAC/D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}