{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import Cell from\"./Cell\";import{calculateWinner}from\"../ai/helpers\";import{getAIMove}from\"../ai/ai\";import{Box,Typography,Button,CircularProgress}from\"@mui/material\";import{useTheme}from\"@mui/system\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const Board=_ref=>{let{boardSize,isAI,aiDifficulty,isTimerEnabled,timeDuration,gameMode}=_ref;const[board,setBoard]=useState(Array.from({length:boardSize},()=>Array(boardSize).fill(\"\")));const navigate=useNavigate();const configurationBoard=()=>{navigate(\"/game\");};const[winner,setWinner]=useState(null);const[isDraw,setIsDraw]=useState(false);const[timeLeft,setTimeLeft]=useState(timeDuration);const[isTimerActive,setIsTimerActive]=useState(false);const[isMatchmaking,setIsMatchmaking]=useState(false);const[matchId,setMatchId]=useState(null);const[opponent,setOpponent]=useState(null);const[matchStatus,setMatchStatus]=useState(null);// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst theme=useTheme();// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst[moves,setMoves]=useState([]);const[isPlayerTurn,setIsPlayerTurn]=useState(false);const[playerSymbol,setPlayerSymbol]=useState(\"X\");const[opponentSymbol,setOpponentSymbol]=useState(\"O\");const[currentPlayer,setCurrentPlayer]=useState(\"X\");const timeoutPollingInterval=useRef(null);const pollingInterval=useRef(null);const username=sessionStorage.getItem(\"TicTacToeUsername\");const[isLoading,setIsLoading]=useState(false);useEffect(()=>{resetBoard();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[boardSize,isAI,aiDifficulty,isTimerEnabled,timeDuration,gameMode]);useEffect(()=>{if(isTimerActive&&timeLeft>0){const timer=setTimeout(()=>setTimeLeft(timeLeft-1),1000);return()=>clearTimeout(timer);}else if(isTimerActive&&timeLeft===0){handleTimeOut();}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[isTimerActive,timeLeft]);useEffect(()=>{if(gameMode===\"online\"&&matchId&&matchStatus===\"active\"){startPollingMatchState();// Start polling for timeout\nstartPollingTimeout();}else{stopPollingMatchState();stopPollingTimeout();}// Cleanup on unmount\nreturn()=>{stopPollingMatchState();stopPollingTimeout();};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[gameMode,matchId,matchStatus]);useEffect(()=>{if(!winner&&!isDraw){if(gameMode===\"online\"||gameMode===\"local\"){// For online and local modes, reset timer when turn changes\nsetTimeLeft(timeDuration);setIsTimerActive(true);}else if(gameMode===\"ai\"&&isAI&&currentPlayer===\"X\"){// For AI mode, reset timer when it's the player's turn\nsetTimeLeft(timeDuration);setIsTimerActive(true);}}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[isPlayerTurn,currentPlayer]);useEffect(()=>{},[winner,isDraw,board,matchStatus,gameMode,isMatchmaking,username]);const handleTimeOut=()=>{if(winner||isDraw)return;if(gameMode===\"ai\"&&isAI){setWinner(\"AI wins due to timeout!\");handleAIMatchResult(\"loss\");}else if(gameMode===\"online\"){// Handle timeout in PvP\nsetWinner(opponent===null?\"\":`${opponent} wins due to timeout!`);handlePVPMatchResult(opponent);stopPollingMatchState();stopPollingTimeout();}else{setWinner(`${isPlayerTurn?\"Player 2\":\"Player 1\"} wins due to timeout!`);}setIsTimerActive(false);};// 3 cases: play online PvP, play against AI, play locally PvP\nconst handleCellClick=(row,col)=>{if(board[row][col]||winner)return;if(gameMode===\"online\"){if(!isPlayerTurn)return;setIsLoading(true);syncMove(row,col);}else if(isAI&&gameMode===\"ai\"){// AI Mode logic\nif(currentPlayer!==\"X\")return;const updatedBoard=board.map((r,i)=>r.map((cell,j)=>i===row&&j===col?currentPlayer:cell));setBoard(updatedBoard);const gameWinner=calculateWinner(updatedBoard);if(gameWinner){const resultMessage=gameWinner===\"X\"?\"Player X wins!\":\"Player O wins!\";setWinner(resultMessage);handleAIMatchResult(gameWinner===\"X\"?\"win\":\"loss\");setIsTimerActive(false);return;}if(isBoardFull(updatedBoard)){setIsDraw(true);handleAIMatchResult(\"draw\");setIsTimerActive(false);return;}setCurrentPlayer(\"O\");setTimeLeft(timeDuration);// AI's turn\nsetTimeout(()=>{const aiMove=getAIMove(updatedBoard,aiDifficulty);if(aiMove){const aiUpdatedBoard=updatedBoard.map((r,i)=>r.map((cell,j)=>i===aiMove.row&&j===aiMove.col?\"O\":cell));setBoard(aiUpdatedBoard);const aiWinner=calculateWinner(aiUpdatedBoard);if(aiWinner){setWinner(\"AI wins!\");handleAIMatchResult(\"loss\");// Player loses to AI\nsetIsTimerActive(false);return;}if(isBoardFull(aiUpdatedBoard)){setIsDraw(true);handleAIMatchResult(\"draw\");// Draw condition\nsetIsTimerActive(false);return;}setCurrentPlayer(\"X\");setTimeLeft(timeDuration);}},300);}else if(gameMode===\"local\"){// Local game\nconst symbol=isPlayerTurn?playerSymbol:opponentSymbol;const updatedBoard=board.map((r,i)=>r.map((cell,j)=>i===row&&j===col?symbol:cell));setBoard(updatedBoard);const gameWinner=calculateWinner(updatedBoard);if(gameWinner){const resultMessage=gameWinner===playerSymbol?\"Player 1 wins!\":\"Player 2 wins!\";setWinner(resultMessage);setIsTimerActive(false);return;}if(isBoardFull(updatedBoard)){setIsDraw(true);setIsTimerActive(false);return;}setIsPlayerTurn(!isPlayerTurn);setTimeLeft(timeDuration);}};const handleAIMatchResult=async result=>{if(!username)return;};const handlePVPMatchResult=async winnerUsername=>{if(!matchId||!username)return;};const isBoardFull=board=>{return board.every(row=>row.every(cell=>cell!==\"\"));};const resetBoard=()=>{// If game is over or board is empty, reset the board\nsetBoard(Array.from({length:boardSize},()=>Array(boardSize).fill(\"\")));setWinner(null);setIsDraw(false);setTimeLeft(timeLeft);setIsTimerActive(true);setIsMatchmaking(false);setMatchId(null);setOpponent(null);setMatchStatus(null);setMoves([]);setIsPlayerTurn(true);setPlayerSymbol(\"X\");setOpponentSymbol(\"O\");setCurrentPlayer(\"X\");stopPollingMatchState();stopPollingTimeout();};// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst startTimer=()=>{setTimeLeft(30);setIsTimerActive(true);};const startMatchmaking=async()=>{const token=sessionStorage.getItem(\"token\");if(!token||!username){alert(\"You must be logged in to start matchmaking with another player.\");setIsMatchmaking(false);return;}setIsMatchmaking(true);};const checkMatchmakingStatus=async()=>{};const fetchMatchState=async()=>{if(!matchId)return;};const syncMove=async(row,col)=>{if(!matchId||!username){setIsLoading(false);return;}};const handleMatchTimeout=async()=>{if(!matchId||!username)return;};// Function to start polling for timeout\nconst startPollingTimeout=()=>{if(timeoutPollingInterval.current)return;timeoutPollingInterval.current=setInterval(handleMatchTimeout,5000);};const stopPollingTimeout=()=>{if(timeoutPollingInterval.current){clearInterval(timeoutPollingInterval.current);timeoutPollingInterval.current=null;}};const startPollingMatchState=()=>{if(pollingInterval.current)return;pollingInterval.current=setInterval(fetchMatchState,2000);};const stopPollingMatchState=()=>{if(pollingInterval.current){clearInterval(pollingInterval.current);pollingInterval.current=null;}};// Format timeLeft into MM:SS\nconst formatTime=seconds=>{const mins=Math.floor(seconds/60).toString().padStart(2,\"0\");const secs=(seconds%60).toString().padStart(2,\"0\");return`${mins}:${secs}`;};// Calculate progress percentage\nconst progressPercentage=timeLeft/timeDuration*100;return/*#__PURE__*/_jsxs(Box,{sx:{position:\"relative\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\",height:\"100%\"},children:[gameMode===\"online\"&&!matchId&&/*#__PURE__*/_jsxs(_Fragment,{children:[isMatchmaking&&/*#__PURE__*/_jsx(CircularProgress,{sx:{mb:2}}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:startMatchmaking,sx:{mb:2},disabled:isMatchmaking,children:isMatchmaking?\"Searching for opponent...\":\"Start Matchmaking\"})]}),(gameMode!==\"online\"||opponent)&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{fontFamily:\"Poppins\",mt:2},children:gameMode===\"online\"&&opponent?/*#__PURE__*/_jsxs(_Fragment,{children:[\"You (\",/*#__PURE__*/_jsx(\"span\",{style:{color:playerSymbol===\"X\"?\"#1976d2\":\"red\",fontWeight:\"bold\"},children:playerSymbol}),\") vs \",opponent,\" (\",/*#__PURE__*/_jsx(\"span\",{style:{color:opponentSymbol===\"X\"?\"#1976d2\":\"red\",fontWeight:\"bold\"},children:opponentSymbol}),\")\"]}):isAI?/*#__PURE__*/_jsxs(_Fragment,{children:[\"Player (\",/*#__PURE__*/_jsx(\"span\",{style:{color:\"#1976d2\",fontWeight:\"bold\"},children:\"X\"}),\") vs AI (\",/*#__PURE__*/_jsx(\"span\",{style:{color:\"red\",fontWeight:\"bold\"},children:\"O\"}),\")\"]}):/*#__PURE__*/_jsxs(_Fragment,{children:[\"Player 1 (\",/*#__PURE__*/_jsx(\"span\",{style:{color:\"#1976d2\",fontWeight:\"bold\"},children:\"X\"}),\") vs Player 2 (\",/*#__PURE__*/_jsx(\"span\",{style:{color:\"red\",fontWeight:\"bold\"},children:\"O\"}),\")\"]})}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{fontFamily:\"Poppins\",mt:2},children:winner||isDraw?\"Game Over\":gameMode===\"local\"?isPlayerTurn?/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:\"#1976d2\"},children:\"X\"}),\"'s Turn\"]}):/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:\"red\"},children:\"O\"}),\"'s Turn\"]}):isPlayerTurn?\"Your Turn\":gameMode===\"online\"?`${opponent}'s Turn`:isAI?\"AI's Turn\":\"Opponent's Turn\"}),isTimerActive&&!winner&&!isDraw&&/*#__PURE__*/_jsxs(Box,{sx:{position:\"relative\",display:\"inline-flex\",mt:2},children:[/*#__PURE__*/_jsx(CircularProgress,{variant:\"determinate\",value:progressPercentage,size:80,thickness:5}),/*#__PURE__*/_jsx(Box,{sx:{top:0,left:0,bottom:0,right:0,position:\"absolute\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\"},children:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",component:\"div\",color:\"textSecondary\",children:formatTime(timeLeft)})})]})]}),/*#__PURE__*/_jsx(Box,{sx:{display:\"grid\",gridTemplateColumns:`repeat(${boardSize}, 1fr)`,gap:\"1px\",mt:2},children:board.map((row,i)=>row.map((cell,j)=>/*#__PURE__*/_jsx(Cell,{value:cell,onClick:()=>handleCellClick(i,j)},`${i}-${j}`)))}),winner&&/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{mt:2},color:\"success.main\",children:winner}),isDraw&&/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{mt:2},color:\"warning.main\",children:\"It's a draw!\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:configurationBoard,sx:{margin:2,fontFamily:\"Poppins\"},children:\"Back to Configuration\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:resetBoard,sx:{margin:2,fontFamily:\"Poppins\"},children:\"Reset Board\"}),isLoading&&/*#__PURE__*/_jsx(Box,{sx:{position:\"fixed\",top:0,left:0,width:\"100%\",height:\"100%\",backgroundColor:\"rgba(128, 128, 128, 0.5)\",zIndex:9999,display:\"flex\",alignItems:\"center\",justifyContent:\"center\"},children:/*#__PURE__*/_jsx(CircularProgress,{})})]});};export default Board;","map":{"version":3,"names":["React","useState","useEffect","useRef","Cell","calculateWinner","getAIMove","Box","Typography","Button","CircularProgress","useTheme","useNavigate","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Board","_ref","boardSize","isAI","aiDifficulty","isTimerEnabled","timeDuration","gameMode","board","setBoard","Array","from","length","fill","navigate","configurationBoard","winner","setWinner","isDraw","setIsDraw","timeLeft","setTimeLeft","isTimerActive","setIsTimerActive","isMatchmaking","setIsMatchmaking","matchId","setMatchId","opponent","setOpponent","matchStatus","setMatchStatus","theme","moves","setMoves","isPlayerTurn","setIsPlayerTurn","playerSymbol","setPlayerSymbol","opponentSymbol","setOpponentSymbol","currentPlayer","setCurrentPlayer","timeoutPollingInterval","pollingInterval","username","sessionStorage","getItem","isLoading","setIsLoading","resetBoard","timer","setTimeout","clearTimeout","handleTimeOut","startPollingMatchState","startPollingTimeout","stopPollingMatchState","stopPollingTimeout","handleAIMatchResult","handlePVPMatchResult","handleCellClick","row","col","syncMove","updatedBoard","map","r","i","cell","j","gameWinner","resultMessage","isBoardFull","aiMove","aiUpdatedBoard","aiWinner","symbol","result","winnerUsername","every","startTimer","startMatchmaking","token","alert","checkMatchmakingStatus","fetchMatchState","handleMatchTimeout","current","setInterval","clearInterval","formatTime","seconds","mins","Math","floor","toString","padStart","secs","progressPercentage","sx","position","display","flexDirection","alignItems","justifyContent","height","children","mb","variant","color","onClick","disabled","fontFamily","mt","style","fontWeight","value","size","thickness","top","left","bottom","right","component","gridTemplateColumns","gap","margin","width","backgroundColor","zIndex"],"sources":["C:/Users/mfauz/Documents/github2/TicTacToe/frontend/src/components/Board.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport { calculateWinner } from \"../ai/helpers\";\nimport { getAIMove } from \"../ai/ai\";\nimport {\n  Box,\n  Typography,\n  Button,\n  CircularProgress\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/system\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface BoardProps {\n  boardSize: number;\n  isAI: boolean;\n  aiDifficulty: string;\n  isTimerEnabled: boolean;\n  timeDuration: number;\n  gameMode: string;\n}\n\nconst Board: React.FC<BoardProps> = ({\n  boardSize,\n  isAI,\n  aiDifficulty,\n  isTimerEnabled,\n  timeDuration,\n  gameMode,\n}) => {\n  const [board, setBoard] = useState(\n    Array.from({ length: boardSize }, () => Array(boardSize).fill(\"\")),\n  );\n  const navigate = useNavigate();\n  const configurationBoard = () => {\n    navigate(\"/game\");\n  };\n\n  const [winner, setWinner] = useState<string | null>(null);\n  const [isDraw, setIsDraw] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(timeDuration);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const [isMatchmaking, setIsMatchmaking] = useState(false);\n  const [matchId, setMatchId] = useState<string | null>(null);\n  const [opponent, setOpponent] = useState<string | null>(null);\n  const [matchStatus, setMatchStatus] = useState<\n    \"waiting\" | \"active\" | \"complete\" | null\n  >(null);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const theme = useTheme();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [moves, setMoves] = useState<any[]>([]);\n  const [isPlayerTurn, setIsPlayerTurn] = useState<boolean>(false);\n  const [playerSymbol, setPlayerSymbol] = useState<\"X\" | \"O\">(\"X\");\n  const [opponentSymbol, setOpponentSymbol] = useState<\"X\" | \"O\">(\"O\");\n  const [currentPlayer, setCurrentPlayer] = useState<\"X\" | \"O\">(\"X\");\n  const timeoutPollingInterval = useRef<NodeJS.Timeout | null>(null);\n  const pollingInterval = useRef<NodeJS.Timeout | null>(null);\n  const username = sessionStorage.getItem(\"TicTacToeUsername\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    resetBoard();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [boardSize, isAI, aiDifficulty, isTimerEnabled, timeDuration, gameMode]);\n\n  useEffect(() => {\n    if (isTimerActive && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (isTimerActive && timeLeft === 0) {\n      handleTimeOut();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isTimerActive, timeLeft]);\n\n  useEffect(() => {\n    if (gameMode === \"online\" && matchId && matchStatus === \"active\") {\n      startPollingMatchState();\n      // Start polling for timeout\n      startPollingTimeout();\n    } else {\n      stopPollingMatchState();\n      stopPollingTimeout();\n    }\n    // Cleanup on unmount\n    return () => {\n      stopPollingMatchState();\n      stopPollingTimeout();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameMode, matchId, matchStatus]);\n\n  useEffect(() => {\n    if (!winner && !isDraw) {\n      if (gameMode === \"online\" || gameMode === \"local\") {\n        // For online and local modes, reset timer when turn changes\n        setTimeLeft(timeDuration);\n        setIsTimerActive(true);\n      } else if (gameMode === \"ai\" && isAI && currentPlayer === \"X\") {\n        // For AI mode, reset timer when it's the player's turn\n        setTimeLeft(timeDuration);\n        setIsTimerActive(true);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlayerTurn, currentPlayer]);\n\n  useEffect(() => {\n    \n  }, [winner, isDraw, board, matchStatus, gameMode, isMatchmaking, username]);\n\n  const handleTimeOut = () => {\n    if (winner || isDraw) return;\n\n    if (gameMode === \"ai\" && isAI) {\n      setWinner(\"AI wins due to timeout!\");\n      handleAIMatchResult(\"loss\");\n    } else if (gameMode === \"online\") {\n      // Handle timeout in PvP\n      setWinner(opponent === null ? \"\" : `${opponent} wins due to timeout!`);\n      handlePVPMatchResult(opponent!);\n      stopPollingMatchState();\n      stopPollingTimeout();\n    } else {\n      setWinner(\n        `${isPlayerTurn ? \"Player 2\" : \"Player 1\"} wins due to timeout!`,\n      );\n    }\n    setIsTimerActive(false);\n  };\n\n  // 3 cases: play online PvP, play against AI, play locally PvP\n  const handleCellClick = (row: number, col: number) => {\n    if (board[row][col] || winner) return;\n\n    if (gameMode === \"online\") {\n      if (!isPlayerTurn) return;\n      setIsLoading(true);\n      syncMove(row, col);\n    } else if (isAI && gameMode === \"ai\") {\n      // AI Mode logic\n      if (currentPlayer !== \"X\") return;\n\n      const updatedBoard = board.map((r, i) =>\n        r.map((cell, j) => (i === row && j === col ? currentPlayer : cell)),\n      );\n      setBoard(updatedBoard);\n\n      const gameWinner = calculateWinner(updatedBoard);\n      if (gameWinner) {\n        const resultMessage =\n          gameWinner === \"X\" ? \"Player X wins!\" : \"Player O wins!\";\n        setWinner(resultMessage);\n\n        handleAIMatchResult(gameWinner === \"X\" ? \"win\" : \"loss\");\n        setIsTimerActive(false);\n        return;\n      }\n\n      if (isBoardFull(updatedBoard)) {\n        setIsDraw(true);\n        handleAIMatchResult(\"draw\");\n        setIsTimerActive(false);\n        return;\n      }\n\n      setCurrentPlayer(\"O\");\n      setTimeLeft(timeDuration);\n\n      // AI's turn\n      setTimeout(() => {\n        const aiMove = getAIMove(updatedBoard, aiDifficulty);\n        if (aiMove) {\n          const aiUpdatedBoard = updatedBoard.map((r, i) =>\n            r.map((cell, j) =>\n              i === aiMove.row && j === aiMove.col ? \"O\" : cell,\n            ),\n          );\n          setBoard(aiUpdatedBoard);\n\n          const aiWinner = calculateWinner(aiUpdatedBoard);\n\n          if (aiWinner) {\n            setWinner(\"AI wins!\");\n            handleAIMatchResult(\"loss\"); // Player loses to AI\n            setIsTimerActive(false);\n            return;\n          }\n\n          if (isBoardFull(aiUpdatedBoard)) {\n            setIsDraw(true);\n            handleAIMatchResult(\"draw\"); // Draw condition\n            setIsTimerActive(false);\n            return;\n          }\n\n          setCurrentPlayer(\"X\");\n          setTimeLeft(timeDuration);\n        }\n      }, 300);\n    } else if (gameMode === \"local\") {\n      // Local game\n      const symbol = isPlayerTurn ? playerSymbol : opponentSymbol;\n      const updatedBoard = board.map((r, i) =>\n        r.map((cell, j) => (i === row && j === col ? symbol : cell)),\n      );\n      setBoard(updatedBoard);\n\n      const gameWinner = calculateWinner(updatedBoard);\n      if (gameWinner) {\n        const resultMessage =\n          gameWinner === playerSymbol ? \"Player 1 wins!\" : \"Player 2 wins!\";\n        setWinner(resultMessage);\n        setIsTimerActive(false);\n        return;\n      }\n\n      if (isBoardFull(updatedBoard)) {\n        setIsDraw(true);\n        setIsTimerActive(false);\n        return;\n      }\n\n      setIsPlayerTurn(!isPlayerTurn);\n      setTimeLeft(timeDuration);\n    }\n  };\n\n  const handleAIMatchResult = async (result: \"win\" | \"loss\" | \"draw\") => {\n    if (!username) return;\n\n  };\n\n  const handlePVPMatchResult = async (winnerUsername: string) => {\n    if (!matchId || !username) return;\n\n  };\n\n  const isBoardFull = (board: string[][]): boolean => {\n    return board.every((row) => row.every((cell) => cell !== \"\"));\n  };\n\n  const resetBoard = () => {\n    // If game is over or board is empty, reset the board\n    setBoard(\n      Array.from({ length: boardSize }, () => Array(boardSize).fill(\"\")),\n    );\n    setWinner(null);\n    setIsDraw(false);\n    setTimeLeft(timeLeft);\n    setIsTimerActive(true);\n    setIsMatchmaking(false);\n    setMatchId(null);\n    setOpponent(null);\n    setMatchStatus(null);\n    setMoves([]);\n    setIsPlayerTurn(true);\n    setPlayerSymbol(\"X\");\n    setOpponentSymbol(\"O\");\n    setCurrentPlayer(\"X\");\n    stopPollingMatchState();\n    stopPollingTimeout();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const startTimer = () => {\n    setTimeLeft(30);\n    setIsTimerActive(true);\n  };\n\n  const startMatchmaking = async () => {\n    const token = sessionStorage.getItem(\"token\");\n\n    if (!token || !username) {\n      alert(\"You must be logged in to start matchmaking with another player.\");\n      setIsMatchmaking(false);\n      return;\n    }\n\n    setIsMatchmaking(true);\n  };\n\n  const checkMatchmakingStatus = async () => {\n    \n  };\n\n  const fetchMatchState = async () => {\n    if (!matchId) return;\n  };\n\n  const syncMove = async (row: number, col: number) => {\n    if (!matchId || !username) {\n      setIsLoading(false);\n      return;\n    }\n\n  };\n\n  const handleMatchTimeout = async () => {\n    if (!matchId || !username) return;\n  };\n\n  // Function to start polling for timeout\n  const startPollingTimeout = () => {\n    if (timeoutPollingInterval.current) return;\n    timeoutPollingInterval.current = setInterval(handleMatchTimeout, 5000);\n  };\n\n  const stopPollingTimeout = () => {\n    if (timeoutPollingInterval.current) {\n      clearInterval(timeoutPollingInterval.current);\n      timeoutPollingInterval.current = null;\n    }\n  };\n\n  const startPollingMatchState = () => {\n    if (pollingInterval.current) return;\n    pollingInterval.current = setInterval(fetchMatchState, 2000);\n  };\n\n  const stopPollingMatchState = () => {\n    if (pollingInterval.current) {\n      clearInterval(pollingInterval.current);\n      pollingInterval.current = null;\n    }\n  };\n\n  // Format timeLeft into MM:SS\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n      .toString()\n      .padStart(2, \"0\");\n    const secs = (seconds % 60).toString().padStart(2, \"0\");\n    return `${mins}:${secs}`;\n  };\n\n  // Calculate progress percentage\n  const progressPercentage = (timeLeft / timeDuration) * 100;\n\n  return (\n    <Box\n      sx={{\n        position: \"relative\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100%\",\n      }}\n    >\n      {gameMode === \"online\" && !matchId && (\n        <>\n          {isMatchmaking && <CircularProgress sx={{ mb: 2 }} />}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={startMatchmaking}\n            sx={{ mb: 2 }}\n            disabled={isMatchmaking}\n          >\n            {isMatchmaking ? \"Searching for opponent...\" : \"Start Matchmaking\"}\n          </Button>\n        </>\n      )}\n\n      {/* New Labels */}\n      {(gameMode !== \"online\" || opponent) && (\n        <>\n          <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", mt: 2 }}>\n            {gameMode === \"online\" && opponent ? (\n              <>\n                You (\n                <span\n                  style={{\n                    color: playerSymbol === \"X\" ? \"#1976d2\" : \"red\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {playerSymbol}\n                </span>\n                ) vs {opponent} (\n                <span\n                  style={{\n                    color: opponentSymbol === \"X\" ? \"#1976d2\" : \"red\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  {opponentSymbol}\n                </span>\n                )\n              </>\n            ) : isAI ? (\n              <>\n                Player (\n                <span style={{ color: \"#1976d2\", fontWeight: \"bold\" }}>X</span>)\n                vs AI (\n                <span style={{ color: \"red\", fontWeight: \"bold\" }}>O</span>)\n              </>\n            ) : (\n              <>\n                Player 1 (\n                <span style={{ color: \"#1976d2\", fontWeight: \"bold\" }}>X</span>)\n                vs Player 2 (\n                <span style={{ color: \"red\", fontWeight: \"bold\" }}>O</span>)\n              </>\n            )}\n          </Typography>\n          <Typography variant=\"h6\" sx={{ fontFamily: \"Poppins\", mt: 2 }}>\n            {winner || isDraw ? (\n              \"Game Over\"\n            ) : gameMode === \"local\" ? (\n              isPlayerTurn ? (\n                <span>\n                  <span style={{ color: \"#1976d2\" }}>X</span>'s Turn\n                </span>\n              ) : (\n                <span>\n                  <span style={{ color: \"red\" }}>O</span>'s Turn\n                </span>\n              )\n            ) : isPlayerTurn ? (\n              \"Your Turn\"\n            ) : gameMode === \"online\" ? (\n              `${opponent}'s Turn`\n            ) : isAI ? (\n              \"AI's Turn\"\n            ) : (\n              \"Opponent's Turn\"\n            )}\n          </Typography>\n\n          {/* Timer with Progress Circle */}\n          {isTimerActive && !winner && !isDraw && (\n            <Box\n              sx={{\n                position: \"relative\",\n                display: \"inline-flex\",\n                mt: 2,\n              }}\n            >\n              <CircularProgress\n                variant=\"determinate\"\n                value={progressPercentage}\n                size={80}\n                thickness={5}\n              />\n              <Box\n                sx={{\n                  top: 0,\n                  left: 0,\n                  bottom: 0,\n                  right: 0,\n                  position: \"absolute\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <Typography variant=\"h6\" component=\"div\" color=\"textSecondary\">\n                  {formatTime(timeLeft)}\n                </Typography>\n              </Box>\n            </Box>\n          )}\n        </>\n      )}\n\n      <Box\n        sx={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${boardSize}, 1fr)`,\n          gap: \"1px\",\n          mt: 2,\n        }}\n      >\n        {board.map((row, i) =>\n          row.map((cell, j) => (\n            <Cell\n              key={`${i}-${j}`}\n              value={cell}\n              onClick={() => handleCellClick(i, j)}\n            />\n          )),\n        )}\n      </Box>\n      {winner && (\n        <Typography variant=\"h6\" sx={{ mt: 2 }} color=\"success.main\">\n          {winner}\n        </Typography>\n      )}\n      {isDraw && (\n        <Typography variant=\"h6\" sx={{ mt: 2 }} color=\"warning.main\">\n          It's a draw!\n        </Typography>\n      )}\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={configurationBoard}\n        sx={{ margin: 2, fontFamily: \"Poppins\" }}\n      >\n        Back to Configuration\n      </Button>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={resetBoard}\n        sx={{ margin: 2, fontFamily: \"Poppins\" }}\n      >\n        Reset Board\n      </Button>\n     \n\n      {/* Loading Spinner Overlay */}\n      {isLoading && (\n        <Box\n          sx={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: \"rgba(128, 128, 128, 0.5)\",\n            zIndex: 9999,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <CircularProgress />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}